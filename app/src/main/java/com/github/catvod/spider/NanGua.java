package com.github.catvod.spider;

import com.github.catvod.parser.C0001;
import com.github.catvod.parser.C0007;
import com.github.catvod.parser.C0011;


import com.github.catvod.spider.C0032;

import com.github.catvod.spider.merge.C0029;
import com.github.catvod.spider.merge.C0027;
import com.github.catvod.spider.merge.C0023;
import com.github.catvod.spider.merge.C0022;

import org.json.JSONArray;
import org.json.JSONObject;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import android.content.Context;
import android.text.TextUtils;
import android.util.Base64;

import java.util.HashMap;
import java.util.List;

import com.github.catvod.utils.okhttp.OkHttpUtil;

import com.github.catvod.crawler.Spider;
import com.github.catvod.crawler.SpiderDebug;

import java.util.ArrayList;
import java.util.Iterator;

public class NanGua extends Spider {

  private static final short[] f29short = {1092, 1088, 1091, 1119, 1119, 1115, 1028, 1048, 1029, 1050, 1049, 1029, 1051, 3093, 3082, 3092, 3082, 3101, 611, 2106, 2089, 2110, 2111, 2085, 2083, 2082, 2067, 2082, 2093, 2081, 2089, 1170, 1153, 1174, 1175, 1165, 1163, 1162, 1211, 1159, 1163, 1152, 1153, 2803, 2805, 2787, 2804, 2731, 2791, 2785, 2787, 2792, 2802, 2428, 2401, 2405, 2413, 2373, 2401, 2404, 2404, 2401, 2427, 1398, 1388, 1378, 1387, 1070, 1077, 1070, 1083, 1078, 656, 641, 647, 645, 1308, 1305, 1283, 1284, 2598, 2618, 2618, 2622, 2676, 2657, 2657, 2615, 2621, 2656, 2605, 2598, 2607, 2592, 2601, 2595, 2603, 2592, 2601, 2615, 2619, 2592, 2656, 2605, 2593, 2595, 2657, 2607, 2622, 2599, 2656, 2622, 2598, 2622, 2657, 2622, 2620, 2593, 2616, 2599, 2602, 2603, 2657, 2616, 2593, 2602, 2577, 2594, 2599, 2621, 2618, 2673, 2607, 2622, 2622, 2584, 2603, 2620, 2621, 2599, 2593, 2592, 2560, 2607, 2595, 2603, 2675, 395, 452, 448, 456, 452, 400, 1995, 1945, 1924, 1920, 1928, 2000, 3095, 3160, 3157, 3084, 2227, 2289, 2288, 2275, 2300, 2294, 2288, 2246, 2294, 2279, 2288, 2288, 2299, 2216, 2215, 2214, 2209, 2213, 2239, 2212, 2213, 2221, 2213, 2227, 2292, 2277, 2277, 2243, 2288, 2279, 2278, 2300, 2298, 2299, 2262, 2298, 2289, 2288, 2216, 2052, 2118, 2119, 2132, 2123, 2113, 2119, 2159, 2125, 2118, 2119, 2126, 2079, 2320, 2391, 2374, 2374, 2315, 2383, 2394, 2383, 2373, 2320, 2386, 2387, 2368, 2399, 2389, 2387, 2420, 2372, 2391, 2392, 2386, 2315, 326, 260, 261, 278, 265, 259, 261, 275, 349, 257, 270, 260, 274, 271, 265, 260, 326, 272, 257, 263, 261, 349, 1565, 1631, 1630, 1613, 1618, 1624, 1630, 1645, 1630, 1609, 1608, 1618, 1620, 1621, 1542, 2166, 2080, 2071, 2067, 2086, 2095, 2097, 2064, 2072, 2149, 2106, 2073, 2149, 2079, 2055, 2107, 2069, 496, 489, 482, 473, 495, 482, 1816, 1813, 3124, 3117, 3110, 3101, 3116, 3107, 3119, 3111, 1387, 1380, 1384, 1376, 1078, 1071, 1060, 1055, 1072, 1065, 1059, 267, 271, 261, 2328, 2305, 2314, 2353, 2332, 2315, 2307, 2319, 2332, 2309, 2333, 942, 944, 932, 2658, 2675, 2677, 2679, 2673, 2685, 2663, 2684, 2662, 478, 479, 479, 684, 681, 685, 681, 692, 1798, 1798, 1798, 2017, 2030, 2018, 2026, 2650, 2655, 2634, 2655, 1280, 1308, 1308, 1304, 1362, 1351, 1351, 1297, 1307, 1350, 1291, 1280, 1289, 1286, 1295, 1285, 1293, 1286, 1295, 1297, 1309, 1286, 1350, 1291, 1287, 1285, 1351, 1289, 1304, 1281, 1350, 1304, 1280, 1304, 1351, 1304, 1306, 1287, 1310, 1281, 1292, 1293, 1351, 1310, 1287, 1292, 1335, 1292, 1293, 1308, 1289, 1281, 1284, 1367, 1289, 1304, 1304, 1342, 1293, 1306, 1307, 1281, 1287, 1286, 1318, 1289, 1285, 1293, 1365, 1494, 1433, 1437, 1429, 1433, 1485, 2946, 3024, 3021, 3017, 3009, 2969, 3015, 2952, 2949, 3036, 1131, 1065, 1064, 1083, 1060, 1070, 1064, 1054, 1070, 1087, 1064, 1064, 1059, 1136, 1151, 1150, 1145, 1149, 1127, 1148, 1149, 1141, 1149, 1131, 1068, 1085, 1085, 1051, 1064, 1087, 1086, 1060, 1058, 1059, 1038, 1058, 1065, 1064, 1136, 2117, 2055, 2054, 2069, 2058, 2048, 2054, 2094, 2060, 2055, 2054, 2063, 2142, 512, 583, 598, 598, 539, 607, 586, 607, 597, 512, 578, 579, 592, 591, 581, 579, 612, 596, 583, 584, 578, 539, 968, 906, 907, 920, 903, 909, 907, 925, 979, 911, 896, 906, 924, 897, 903, 906, 968, 906, 907, 920, 903, 909, 907, 952, 907, 924, 925, 903, 897, 896, 979, 3082, 3164, 3179, 3183, 3162, 3155, 3149, 3180, 3172, 3097, 3142, 3173, 3097, 3171, 3195, 3143, 3177, 2429, 2404, 2415, 2388, 2402, 2415, 568, 545, 554, 529, 544, 559, 547, 555, 555, 550, 559, 570, 512, 561, 574, 562, 570, 2112, 2125, 2116, 2129, 1377, 1400, 1395, 1352, 1390, 1394, 1398, 1381, 1513, 1525, 1521, 1506, 745, 752, 763, 704, 766, 749, 762, 766, 2991, 2998, 3005, 2950, 2987, 3004, 2996, 3000, 2987, 2994, 2986, 2946, 2972, 2952, 3000, 2977, 2986, 2961, 2991, 2989, 3002, 2977, 3004, 1038, 1047, 1052, 1063, 1052, 1041, 1034, 1053, 1051, 1036, 1047, 1034, 2800, 2793, 2786, 2777, 2789, 2793, 2792, 2802, 2787, 2792, 2802, 1956, 1955, 1963, 1954, 823, 811, 806, 830, 802, 821, 792, 814, 809, 801, 808, 3157, 3150, 3145, 3153, 2054, 2073, 2068, 2069, 2079, 2095, 2073, 2078, 2070, 2079, 1058, 2572, 2571, 2581, 1647, 668, 645, 654, 693, 666, 646, 651, 659, 693, 652, 664, 645, 647, 1467, 1442, 1449, 1426, 1469, 1441, 1452, 1460, 1426, 1464, 1471, 1441, 2674, 2679, 2669, 2666, 1996, 1987, 1998, 2012, 2012, 2144, 2112, 2073, 2127, 2114, 2123, 2142, 2148, 2130, 2143, 2073, 2049, 2073, 2058, 2073, 2071, 2073, 2127, 2114, 2123, 2142, 2148, 2133, 2138, 2134, 2142, 2073, 2049, 2073, 32014, 22346, 2073, 2118, 2071, 2112, 2073, 2127, 2114, 2123, 2142, 2148, 2130, 2143, 2073, 2049, 2073, 2057, 2073, 2071, 2073, 2127, 2114, 2123, 2142, 2148, 2133, 2138, 2134, 2142, 2073, 2049, 2073, 32014, -32259, 23132, 2073, 2118, 2071, 2112, 2073, 2127, 2114, 2123, 2142, 2148, 2130, 2143, 2073, 2049, 2073, 2056, 2073, 2071, 2073, 2127, 2114, 2123, 2142, 2148, 2133, 2138, 2134, 2142, 2073, 2049, 2073, 30407, -30143, 2073, 2118, 2071, 2112, 2073, 2127, 2114, 2123, 2142, 2148, 2130, 2143, 2073, 2049, 2073, 2063, 2073, 2071, 2073, 2127, 2114, 2123, 2142, 2148, 2133, 2138, 2134, 2142, 2073, 2049, 2073, 23187, 26384, 2073, 2118, 2071, 2112, 2073, 2127, 2114, 2123, 2142, 2148, 2130, 2143, 2073, 2049, 2073, 2063, 2061, 2073, 2071, 2073, 2127, 2114, 2123, 2142, 2148, 2133, 2138, 2134, 2142, 2073, 2049, 2073, 20781, 23132, 2073, 2118, 2150, 1148, 1120, 1120, 1124, 1070, 1083, 1083, 1133, 1127, 1082, 1143, 1148, 1141, 1146, 1139, 1145, 1137, 1146, 1139, 1133, 1121, 1146, 1082, 1143, 1147, 1145, 1083, 1141, 1124, 1149, 1082, 1124, 1148, 1124, 1083, 1124, 1126, 1147, 1122, 1149, 1136, 1137, 1083, 1148, 1147, 1145, 1137, 1099, 1136, 1141, 1120, 1141, 1067, 1141, 1124, 1124, 1090, 1137, 1126, 1127, 1149, 1147, 1146, 1114, 1141, 1145, 1137, 1065, 534, 601, 605, 597, 601, 525, 2177, 2259, 2254, 2250, 2242, 2202, 1170, 1245, 1232, 1161, 1156, 1170, 1232, 1233, 1218, 1245, 1239, 1233, 1255, 1239, 1222, 1233, 1233, 1242, 1161, 1158, 1159, 
    1152, 1156, 1182, 1157, 1156, 1164, 1156, 1170, 1237, 1220, 1220, 1250, 1233, 1222, 1223, 1245, 1243, 1242, 1271, 1243, 1232, 1233, 1161, 1524, 1462, 1463, 1444, 1467, 1457, 1463, 1439, 1469, 1462, 1463, 1470, 1519, 753, 694, 679, 679, 746, 686, 699, 686, 676, 753, 691, 690, 673, 702, 692, 690, 661, 677, 694, 697, 691, 746, 1856, 1794, 1795, 1808, 1807, 1797, 1795, 1813, 1883, 1799, 1800, 1794, 1812, 1801, 1807, 1794, 1856, 1794, 1795, 1808, 1807, 1797, 1795, 1840, 1795, 1812, 1813, 1807, 1801, 1800, 1883, 2269, 2187, 2236, 2232, 2189, 2180, 2202, 2235, 2227, 2254, 2193, 2226, 2254, 2228, 2220, 2192, 2238, 1331, 1324, 1321, 1316, 1317, 1139, 1142, 1123, 1142, 2652, 2643, 2655, 2647, 502, 495, 484, 479, 489, 484, 984, 981, 3318, 3311, 3300, 3295, 3310, 3297, 3309, 3301, 2847, 2822, 2829, 2870, 2841, 2816, 2826, 2874, 2878, 2868, 2521, 2496, 2507, 2544, 2525, 2506, 2498, 2510, 2525, 2500, 2524, 2670, 2667, 2673, 2678, 2143, 2141, 2143, 2140, 2139, 2143, 2143, 2139, 2137, 2140, 2135, 2136, 2143, 2137, 2142, 2664, 2671, 2673, 1177, 1172, 1168, 1173, 1172, 1155, 2105, 2159, 2136, 2140, 2153, 2144, 2174, 2143, 2135, 2090, 2165, 2134, 2090, 2128, 2120, 2164, 2138, 884, 881, 868, 881, 2227, 1296, 1281, 1298, 1299, 1285, 1679, 1683, 1694, 1670, 1706, 1677, 1683, 489, 492, 505, 492, 2751, 2723, 2723, 2727, 2797, 2808, 2808, 2734, 2724, 2809, 2740, 2751, 2742, 2745, 2736, 2746, 2738, 2745, 2736, 2734, 2722, 2745, 2809, 2740, 2744, 2746, 2808, 2742, 2727, 2750, 2809, 2727, 2751, 2727, 2808, 2727, 2725, 2744, 2721, 2750, 2739, 2738, 2808, 2724, 2738, 2742, 2725, 2740, 2751, 2696, 2725, 2738, 2724, 2722, 2747, 2723, 2792, 2721, 2750, 2739, 2738, 2744, 2696, 2745, 2742, 2746, 2738, 2794, 2679, 2608, 2593, 2593, 2567, 2612, 2595, 2594, 2616, 2622, 2623, 2591, 2608, 2620, 2612, 2668, 730, 661, 657, 665, 661, 705, 1627, 1545, 1556, 1552, 1560, 1600, 2719, 2781, 2780, 2767, 2768, 2778, 2780, 2794, 2778, 2763, 2780, 2780, 2775, 2692, 2699, 2698, 2701, 2697, 2707, 2696, 2697, 2689, 2697, 2719, 2776, 2761, 2761, 2799, 2780, 2763, 2762, 2768, 2774, 2775, 2810, 2774, 2781, 2780, 2692, 627, 561, 560, 547, 572, 566, 560, 536, 570, 561, 560, 569, 616, 908, 971, 986, 986, 919, 979, 966, 979, 985, 908, 974, 975, 988, 963, 969, 975, 1000, 984, 971, 964, 974, 919, 3063, 2997, 2996, 2983, 3000, 2994, 2996, 2978, 3052, 2992, 3007, 2997, 2979, 3006, 3000, 2997, 3063, 2997, 2996, 2983, 3000, 2994, 2996, 2951, 2996, 2979, 2978, 3000, 3006, 3007, 3052, 1925, 2003, 2020, 2016, 2005, 2012, 1986, 2019, 2027, 1942, 1993, 2026, 1942, 2028, 2036, 1992, 2022, 1121, 1150, 1139, 1138, 1144, 1096, 1145, 1142, 1146, 1138, 3262, 3239, 3244, 3223, 3233, 3244, 598, 603, 2644, 2637, 2630, 2685, 2636, 2627, 2639, 2631, 1406, 1383, 1388, 1367, 1400, 1377, 1387, 2038, 2034, 2040, 2899, 2890, 2881, 2938, 2903, 2880, 2888, 2884, 2903, 2894, 2902, 1453, 1461, 1458, 1467, 1444, 1461, 1464, 1449, 2255, 2250, 2256, 2263};
  private static final String siteUrl = "";

  //okhttp/3.12.0
  String zH = C0041.m899(m381(), 0, 13, 1067);
  //1.0.9
  String t0 = C0029.m710(m381(), 13, 5, 3108);
  //9
  String N = C0039.m875(m381(), 18, 1, 602);
  //""
  String tF = C0033.m786(); 
  //14
  String yq = C0022.m587();
  //M2012K11AC
  String i = C0022.m597();

  //Redmi
  String SN = C0022.m591();


  //ext为外部给的字符串
  public String ext = "";

  public NanGua() {
    int m691 = C0027.m691();
    int i = 1616;
    while (true) {
      i ^= 1633;
      switch (i) {
        case 14:
          break;
        case 49:
          if (m691 > 0) {
            break;
          } else {
            i = 1709;
            continue;
          }
        case 204:
          System.out.println("构造函数204===");
          System.out.println(C0033.m789("dODUN"));
          return;
        case 239:
          return;
      }
      i = 1678;
    }
  }

  public void init(Context context,String ext) {
    int i;
    try {
      super.init(context, ext);
      this.tF = C0027.m686(m381(), 1160, 15, 2158);
      //sign=505005c3c3551ad86f2c89efb27b23ea
      this.tF = "1700889236452";
      // System.out.println(this.tF);
    } catch (Exception e) {
      C0007.m113(e);
    }
  }

  public String homeContent(boolean filter) {
    try {
      // System.out.println("A"+tF+"A");
      System.out.println(SN);

    } catch (Exception e) {
      SpiderDebug.log(e);
    }
    return "";
  }

  public String categoryContent(String tid, String pg, boolean filter, HashMap<String, String> extend) {
    try {

    } catch (Exception e) {
      SpiderDebug.log(e);
    }
    return "";
  }

  public String detailContent(List<String> ids) {
    try {

    } catch (Exception e) {
      SpiderDebug.log(e);
    }
    return "";
  }

  public String searchContent(String key, boolean quick) {
    try {
      int i = 0;
      //data
      String m939 = C0043.m939(m381(), 1218, 4, 397);
      // System.out.println(m939);
      long m108 = C0007.m108();
      StringBuilder sb = new StringBuilder();
      C0041.m893(sb, C0039.m875(m381(), 1222, 68, 2775));
      C0041.m893(sb, C0031.m752(key));
      C0041.m893(sb, m385(this));
      C0041.m893(sb, C0011.m178(m381(), 1306, 6, 764));
      // C0041.m893(sb, m382(this));
      C0041.m893(sb, C0035.m827(m381(), 1312, 6, 1661));
      C0034.m817(sb, m108);
      C0041.m893(sb, C0023.m609(m381(), 1318, 39, 2745));

      System.out.println(sb.toString());


    } catch (Exception e) {
      SpiderDebug.log(e);
    }
    return "";
  }

  public String playerContent(String flag, String id, List<String> vipFlags) {
    try {

    } catch (Exception e) {
      SpiderDebug.log(e);
    }
    return "";
  }

  // ====================
  void printLog(String key, String value) {
    try {

      String str = key + "=" + value;
      String str1 = "http://localhost:8080/?" + str;
      String res = OkHttpUtil.string(str1, null);
      System.out.println(res);
    } catch (Exception e) {
    }
  }
  // ====================
  public static short[] m381() {
    int m22 = C0001.m22();
    int i = 1616;
    while (true) {
      i ^= 1633;
      switch (i) {
        case 14:
          break;
        case 49:
          if (m22 < 0) {
            break;
          } else {
            i = 1709;
            continue;
          }
        case 204:
          return f29short;
        case 239:
          int i2 = 1740;
          while (true) {
            i2 ^= 1757;
            switch (i2) {
              case 17:
                i2 = 1771;
                break;
              case 54:
                return null;
            }
          }
          // break;
          // System.out.println("aa");
      }
      i = 1678;
    }
  }
  public static String m385(Object obj) {
    return "&appVersionName="+((NanGua) obj).t0;
  }
  public static String m382(Object obj) {
    return "&time="+((NanGua) obj).tF;
  }
}
